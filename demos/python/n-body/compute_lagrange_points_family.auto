# This script computes the initial circle of solutions for mu=0
# as well as the bifurcating branches which give us the
# Lagrange points.  It then plots the full bifurcation diagram.

# Load 3d.c and c.3d into the AUTO CLUI
load('3d')

# Add a stopping condition so we only compute the loop once

# We tell AUTO to stop when parameter 16 is 0.991, parameter 1 is -0.1,
# or parameter 1 is 1.1.  If parameter1 is 0.5 we just report
# a point.
cc('UZR',[[-16,0.991],
          [-1,-0.1],
          [1,0.5],
          [-1,1.1]])

# We also want to compute branches for the first 4 bifurcation
# points.
cc('MXBF',-4)

# IPS=0 tells AUTO to compute a family of equilibria.
cc('IPS',0)

# Compute the circle.
run()

# Save the data in b.lagrange_points,  s.lagrange_points,
# and d.lagrange_points. 
sv('lagrange_points')

# Load the save solution back into the AUTO CLUI
load(s='lagrange_points')

# This command parses the solution file s.lagrange_points and returns
# a Python object which contains all of the data in the
# file in an easy to use format.
data=sl('lagrange_points')

# Find the label of the last solution of the previous calculation
# and use this solution as the starting point of the next
# calculation.
cc('IRS',data[-1]["Label"])
# Do not compute any bifurcating branches.
cc('MXBF',0)

# We tell AUTO to stop when parameter 16 is 1.0, parameter 1 is -0.1,
# or parameter 1 is 1.1.  If parameter1 is 0.5 we just report
# a point.
cc('UZR',[[-16,1.0],
          [-1,-0.1],
          [1,0.5],
          [-1,1.1]])

# Run the calculation
run()

# Append the newly computed data to the appropriate
# lagrange_points files.
ap('lagrange_points')

# Plot the solutions
p3('lagrange_points')
# Wait for the user to press a key before the script quits.
wait()


